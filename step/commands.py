import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from binance.client import Client
from binance.exceptions import BinanceAPIException
from config import BINANCE_API_KEY, BINANCE_API_SECRET
import db

logger = logging.getLogger(__name__)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET, testnet=True)

# –ü—Ä–∏–º–µ—Ä –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Å—Ç–∏–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:
# –î–ª—è —É—Å–ø–µ—Ö–∞ ‚Äì "‚úÖ", –¥–ª—è –æ—à–∏–±–æ–∫ ‚Äì "‚ùå", –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äì "‚ÑπÔ∏è", –¥–ª—è –∫–æ–º–∞–Ω–¥ ‚Äì "üöÄ", –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤ ‚Äì "üìà/üìâ" –∏ —Ç.–¥.

async def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."""
    user = update.effective_user
    msg = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üöÄ –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞.\n"
        "‚ÑπÔ∏è –í–≤–µ–¥–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(msg)

async def help_command(update: Update, context: CallbackContext):
    msg = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üëã <code>/start</code> ‚Äì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "‚ÑπÔ∏è <code>/help</code> ‚Äì –°–ø—Ä–∞–≤–∫–∞\n"
        "üìú <code>/all</code> ‚Äì –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "üí∞ <code>/price &lt;–º–æ–Ω–µ—Ç–∞&gt;</code> ‚Äì –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
        "üìä <code>/ticker &lt;–º–æ–Ω–µ—Ç–∞&gt;</code> ‚Äì 24-—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üìà <code>/orderbook &lt;–º–æ–Ω–µ—Ç–∞&gt;</code> ‚Äì –°—Ç–∞–∫–∞–Ω\n"
        "üïí <code>/history &lt;–º–æ–Ω–µ—Ç–∞&gt;</code> ‚Äì –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫\n"
        "üîÑ <code>/converter &lt;—Å—É–º–º–∞&gt; &lt;–∏–∑_–º–æ–Ω–µ—Ç—ã&gt; &lt;–≤_–º–æ–Ω–µ—Ç—É&gt;</code> ‚Äì –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è\n"
        "üîî <code>/subscribe &lt;–º–æ–Ω–µ—Ç–∞&gt; &lt;–∏–Ω—Ç–µ—Ä–≤–∞–ª&gt;</code> ‚Äì –ü–æ–¥–ø–∏—Å–∫–∞\n"
        "‚ùå <code>/unsubscribe &lt;–º–æ–Ω–µ—Ç–∞&gt;</code> ‚Äì –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "üìã <code>/subscribe_list</code> ‚Äì –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "üèÜ <code>/top</code> ‚Äì –õ–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞\n"
        "ü§ù <code>/compare &lt;–º–æ–Ω–µ—Ç–∞1&gt; &lt;–º–æ–Ω–µ—Ç–∞2&gt;</code> ‚Äì –°—Ä–∞–≤–Ω–µ–Ω–∏–µ\n"
        "üìâ <code>/trends</code> ‚Äì –†—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã\n"
        "üì∞ <code>/news_on</code> ‚Äì –í–∫–ª. –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üö´ <code>/news_off</code> ‚Äì –í—ã–∫–ª. –Ω–æ–≤–æ—Å—Ç–∏\n"
    )
    await update.message.reply_text(msg, parse_mode='HTML')


async def get_all_coins():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –∫ USDT."""
    info = binance_client.get_exchange_info()
    symbols = [s['symbol'] for s in info['symbols'] if s['symbol'].endswith('USDT')]
    return symbols

async def all_coins(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /all ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    try:
        symbols = await get_all_coins()
        symbols.sort()
        coins_text = "\n".join(symbols[:100])
        msg = f"üìú *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (100):*\n{coins_text}"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def price(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /price <–º–æ–Ω–µ—Ç–∞> ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É."""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <–º–æ–Ω–µ—Ç–∞>")
        return
    coin_input = context.args[0].upper()
    coin = coin_input if coin_input.endswith("USDT") else coin_input + "USDT"
    try:
        ticker_data = binance_client.get_symbol_ticker(symbol=coin)
        msg = f"üí∞ *{coin}* —Ü–µ–Ω–∞: *{ticker_data['price']} USDT*"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin}")

async def ticker(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /ticker <–º–æ–Ω–µ—Ç–∞> ‚Äì –≤—ã–≤–æ–¥–∏—Ç 24-—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ticker <–º–æ–Ω–µ—Ç–∞>")
        return
    coin_input = context.args[0].upper()
    coin = coin_input if coin_input.endswith("USDT") else coin_input + "USDT"
    try:
        stats = binance_client.get_ticker(symbol=coin)
        msg = (
            f"üìä *{coin}* —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:\n"
            f"üí≤ –¶–µ–Ω–∞: *{stats['lastPrice']} USDT*\n"
            f"üîÑ –ò–∑–º.: *{stats['priceChangePercent']}%*\n"
            f"üìà –ú–∞–∫—Å.: *{stats['highPrice']} USDT*\n"
            f"üìâ –ú–∏–Ω.: *{stats['lowPrice']} USDT*\n"
            f"üíπ –û–±—ä–µ–º: *{stats['volume']}*\n"
        )
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin}")

async def orderbook(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /orderbook <–º–æ–Ω–µ—Ç–∞> ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞–∫–∞–Ω."""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /orderbook <–º–æ–Ω–µ—Ç–∞>")
        return
    coin_input = context.args[0].upper()
    coin = coin_input if coin_input.endswith("USDT") else coin_input + "USDT"
    try:
        depth = binance_client.get_order_book(symbol=coin, limit=5)
        bids = "\n".join([f"üíµ {bid[0]} (–æ–±: {bid[1]})" for bid in depth['bids']])
        asks = "\n".join([f"üí∂ {ask[0]} (–æ–±: {ask[1]})" for ask in depth['asks']])
        msg = f"üìà *{coin}* Order Book:\n\n*–ü–æ–∫—É–ø–∫–∏:*\n{bids}\n\n*–ü—Ä–æ–¥–∞–∂–∏:*\n{asks}"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin}")

async def history(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /history <–º–æ–Ω–µ—Ç–∞> ‚Äì –≤—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫."""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <–º–æ–Ω–µ—Ç–∞>")
        return
    coin_input = context.args[0].upper()
    coin = coin_input if coin_input.endswith("USDT") else coin_input + "USDT"
    try:
        trades = binance_client.get_recent_trades(symbol=coin, limit=5)
        msg = f"üïí *{coin}* –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n"
        for trade in trades:
            msg += f"‚è∞ {trade['time']} | üí≤ {trade['price']} | üî¢ {trade['qty']}\n"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin}")

async def converter(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /converter <—Å—É–º–º–∞> <–∏–∑_–º–æ–Ω–µ—Ç—ã> <–≤_–º–æ–Ω–µ—Ç—É> ‚Äì –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—ã."""
    if len(context.args) != 3:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /converter <—Å—É–º–º–∞> <–∏–∑_–º–æ–Ω–µ—Ç—ã> <–≤_–º–æ–Ω–µ—Ç—É>")
        return
    try:
        amount = float(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    from_coin = context.args[1].upper()
    to_coin = context.args[2].upper()
    from_symbol = from_coin if from_coin.endswith("USDT") else from_coin + "USDT"
    to_symbol = to_coin if to_coin.endswith("USDT") else to_coin + "USDT"
    try:
        from_price = float(binance_client.get_symbol_ticker(symbol=from_symbol)['price'])
        to_price = float(binance_client.get_symbol_ticker(symbol=to_symbol)['price'])
        result = amount * from_price / to_price
        msg = f"üîÑ *{amount} {from_coin}* = *{result:.8f} {to_coin}*"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except BinanceAPIException as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")

async def subscribe(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /subscribe <–º–æ–Ω–µ—Ç–∞> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> ‚Äì –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    if len(context.args) != 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <–º–æ–Ω–µ—Ç–∞> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—Å–µ–∫>")
        return
    coin = context.args[0].upper()
    try:
        interval = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    user_id = update.effective_user.id
    db.add_subscription(user_id, coin, interval)
    await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ *{coin}* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)", parse_mode='Markdown')

async def unsubscribe(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe <–º–æ–Ω–µ—Ç–∞> ‚Äì –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <–º–æ–Ω–µ—Ç–∞>")
        return
    coin = context.args[0].upper()
    user_id = update.effective_user.id
    db.remove_subscription(user_id, coin)
    await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ *{coin}* –æ—Ç–º–µ–Ω–µ–Ω–∞", parse_mode='Markdown')

async def subscribe_list(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /subscribe_list ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."""
    user_id = update.effective_user.id
    subs = db.get_subscriptions(user_id)
    if not subs:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    else:
        msg = "üìã *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:*\n"
        for coin, interval in subs:
            msg += f"‚Ä¢ {coin} ‚Äî {interval} —Å–µ–∫\n"
        await update.message.reply_text(msg, parse_mode='Markdown')

async def top(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /top ‚Äì –≤—ã–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–∏–¥–µ—Ä–æ–≤ —Ä—ã–Ω–∫–∞ –ø–æ –æ–±—ä—ë–º—É —Ç–æ—Ä–≥–æ–≤."""
    try:
        tickers = binance_client.get_ticker()
        sorted_tickers = sorted(tickers, key=lambda x: float(x['quoteVolume']), reverse=True)
        top_list = sorted_tickers[:5]
        msg = "üèÜ *–¢–æ–ø –ø–æ –æ–±—ä—ë–º—É —Ç–æ—Ä–≥–æ–≤ (24 —á):*\n"
        for t in top_list:
            msg += f"‚Ä¢ {t['symbol']} ‚Äî {t['quoteVolume']} | {t['priceChangePercent']}%\n"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def compare(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /compare <–º–æ–Ω–µ—Ç–∞1> <–º–æ–Ω–µ—Ç–∞2> ‚Äì —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."""
    if len(context.args) != 2:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare <–º–æ–Ω–µ—Ç–∞1> <–º–æ–Ω–µ—Ç–∞2>")
        return
    coin1 = context.args[0].upper()
    coin2 = context.args[1].upper()
    symbol1 = coin1 if coin1.endswith("USDT") else coin1 + "USDT"
    symbol2 = coin2 if coin2.endswith("USDT") else coin2 + "USDT"
    try:
        ticker1 = binance_client.get_ticker(symbol=symbol1)
        ticker2 = binance_client.get_ticker(symbol=symbol2)
        msg = (
            f"ü§ù *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {coin1} vs {coin2}*\n\n"
            f"‚Ä¢ {coin1}: {ticker1['lastPrice']} USDT, {ticker1['priceChangePercent']}%\n"
            f"‚Ä¢ {coin2}: {ticker2['lastPrice']} USDT, {ticker2['priceChangePercent']}%\n"
        )
        await update.message.reply_text(msg, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def trends(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /trends ‚Äì –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤."""
    try:
        tickers = binance_client.get_ticker()
        sorted_by_change = sorted(tickers, key=lambda x: float(x['priceChangePercent']))
        losers = sorted_by_change[:3]
        gainers = sorted_by_change[-3:]
        msg = "üìâ *–ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é—â–∏–µ:*\n"
        for t in losers:
            msg += f"‚Ä¢ {t['symbol']} ‚Äî {t['priceChangePercent']}%\n"
        msg += "\nüìà *–ù–∞–±–∏—Ä–∞—é—â–∏–µ:*\n"
        for t in reversed(gainers):
            msg += f"‚Ä¢ {t['symbol']} ‚Äî {t['priceChangePercent']}%\n"
        await update.message.reply_text(msg, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def news_on(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /news_on ‚Äì –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    db.add_news_subscription(user_id)
    await update.message.reply_text("üì∞ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

async def news_off(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /news_off ‚Äì –æ—Ç–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."""
    user_id = update.effective_user.id
    db.remove_news_subscription(user_id)
    await update.message.reply_text("üö´ –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
